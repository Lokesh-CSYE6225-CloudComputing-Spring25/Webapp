name: Packer Build

on:
  push:
    branches:
      - main  # Runs only when changes are merged to the main branch

jobs:
  build_packer_image:
    name: Build Packer Image for AWS and GCP
    runs-on: ubuntu-latest

    permissions:
      id-token: write  # Required for OIDC authentication
      contents: read

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Packer
        uses: hashicorp/setup-packer@main
        with:
          version: latest

      - name: Install AWS CLI
        run: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install --update
          aws --version

      - name: Install GCP CLI
        run: |
          curl -sSL https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo tee /etc/apt/trusted.gpg.d/google.asc
          sudo apt-get update
          sudo apt-get install -y google-cloud-cli

      # ðŸ”¹ AWS Authentication (Static Credentials)
      - name: Authenticate AWS CLI
        run: |
          aws configure set aws_access_key_id "${{ secrets.AWS_ACCESS_KEY_ID }}"
          aws configure set aws_secret_access_key "${{ secrets.AWS_SECRET_ACCESS_KEY }}"
          aws configure set region us-east-1

      # ðŸ”¹ Authenticate GCP CLI using Service Account Key
      - name: Authenticate to GCP CLI
        uses: google-github-actions/auth@v2
        with:
          credentials_json: "${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}"
          create_credentials_file: true
          export_environment_variables: true

      - name: Run Integration Tests
        run: |
          echo "Running integration tests..."
          # Add integration test commands here (e.g., pytest, npm test, etc.)
          echo "Integration Tests Passed"

      - name: Build Application Artifact
        run: |
          echo "Building application artifact..."
          zip -r Webapp.zip ./
          echo "Application artifact created: Webapp.zip"

      - name: Create .env File
        run: |
          cat <<EOF > .env
          DB_USER=${{ secrets.DB_USER }}
          DB_PASS=${{ secrets.DB_PASS }}
          DB_HOST=${{ secrets.DB_HOST }}
          DB_NAME=${{ secrets.DB_NAME }}
          APP_USER=${{ secrets.APP_USER }}
          APP_GROUP=${{ secrets.APP_GROUP }}
          APP_DIR=${{ secrets.APP_DIR }}
          EOF
          echo ".env file created successfully!"

      - name: Initialize Packer
        run: |
          packer init ubuntu_webapp.pkr.hcl

      - name: Build Packer Image for AWS and GCP
        run: |
          packer build -var "aws_region=us-east-1" -var "gcp_project_id=${{ secrets.GCP_PROJECT_ID }}" ubuntu_webapp.pkr.hcl

      - name: Retrieve AMI ID
        id: get_ami_id
        run: |
          IMAGE_NAME="awsWebapp-$(date +%Y%m%d%H%M%S)"
          AMI_ID=$(aws ec2 describe-images --filters "Name=name,Values=$IMAGE_NAME" --query "Images[0].ImageId" --output text)
          echo "AMI ID: $AMI_ID"
          echo "AMI_ID=$AMI_ID" >> $GITHUB_ENV

      - name: Pass the AMI to Demo in AWS
        run: |
          TARGET_AWS_ACCOUNT="${{ secrets.AWS_DEMO_ACCOUNT_ID }}"
          echo "Target AWS Account: $TARGET_AWS_ACCOUNT"
          SNAPSHOT_ID=$(aws ec2 describe-images --image-ids $AMI_ID --query "Images[0].BlockDeviceMappings[0].Ebs.SnapshotId" --output text)
          echo "Associated Snapshot ID: $SNAPSHOT_ID"
          
          aws ec2 modify-image-attribute --image-id $AMI_ID --launch-permission "Add=[{UserId=$TARGET_AWS_ACCOUNT}]"
          aws ec2 modify-snapshot-attribute --snapshot-id $SNAPSHOT_ID --attribute createVolumePermission --operation-type add --user-ids $TARGET_AWS_ACCOUNT
          
          aws ec2 describe-image-attribute --image-id $AMI_ID --attribute launchPermission
          aws ec2 describe-snapshot-attribute --snapshot-id $SNAPSHOT_ID --attribute createVolumePermission
