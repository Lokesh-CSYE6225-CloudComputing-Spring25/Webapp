name: Packer Build

on:
  push:
    branches:
      - main  # Runs only when changes are merged to the main branch

jobs:
  build_packer_image:
    name: Build Packer Image for AWS and GCP
    runs-on: ubuntu-latest

    permissions:
      id-token: write  # Required for OIDC authentication
      contents: read

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Packer
        uses: hashicorp/setup-packer@main
        with:
          version: latest

      - name: Install AWS CLI
        run: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install --update
          aws --version

      - name: Install GCP CLI
        run: |
          curl -sSL https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo tee /etc/apt/trusted.gpg.d/google.asc
          sudo apt-get update
          sudo apt-get install -y google-cloud-cli

      # ðŸ”¹ AWS Authentication (Static Credentials)
      - name: Authenticate AWS CLI
        run: |
          aws configure set aws_access_key_id "${{ secrets.AWS_ACCESS_KEY_ID }}"
          aws configure set aws_secret_access_key "${{ secrets.AWS_SECRET_ACCESS_KEY }}"
          aws configure set region us-east-1

      # ðŸ”¹ Authenticate GCP CLI using Service Account Key
      - name: Authenticate to GCP CLI
        uses: google-github-actions/auth@v2
        with:
          credentials_json: "${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}"
          create_credentials_file: true
          export_environment_variables: true

      # - name: Authenticate to GCP CLI
      #   run: |
      #     echo '${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}' > $HOME/gcp-key.json
      #     export GOOGLE_APPLICATION_CREDENTIALS=$HOME/gcp-key.json
      #     gcloud auth activate-service-account --key-file=$HOME/gcp-key.json
      #     gcloud auth list

      - name: Setup Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          version: 'latest'

      - name: Verify GCP CLI Installation
        run: gcloud --version

      - name: Run Integration Tests
        run: |
          echo "Running integration tests..."
          # Add integration test commands here (e.g., pytest, npm test, etc.)
          echo "Integration Tests Passed"

      - name: Build Application Artifact
        run: |
          echo "Building application artifact..."
          zip -r Webapp.zip ./
          echo "Application artifact created: Webapp.zip"

      - name: Create .env File
        run: |
          echo "DB_USER=${{ secrets.DB_USER }}" >> .env
          echo "DB_PASS=${{ secrets.DB_PASS }}" >> .env
          echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env
          echo "APP_USER=${{ secrets.APP_USER }}" >> .env
          echo "APP_GROUP=${{ secrets.APP_GROUP }}" >> .env
          echo "APP_DIR=${{ secrets.APP_DIR }}" >> .env
          echo ".env file created successfully!"

      - name: Initialize Packer
        run: |
          packer init ubuntu_webapp.pkr.hcl

      - name: Build Packer Image for AWS and GCP
        run: |
          export AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
          export AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
          export AWS_DEFAULT_REGION=us-east-1
          packer build -var "aws_region=us-east-1" -var "gcp_project_id=${{ secrets.GCP_PROJECT_ID }}" .
          
      - name: Pass the AMI to Demo in AWS
        run: |
          AMI_ID=$(aws ec2 describe-images --owners self --query "Images | sort_by(@, &CreationDate)[-1].ImageId" --output text)
      
          if [ -z "$AMI_ID" ] || [ "$AMI_ID" == "null" ]; then
            echo "Error: AMI ID not found!"
            exit 1
          fi
          
          echo "AMI ID: $AMI_ID"
          
          TARGET_AWS_ACCOUNT="${{ secrets.AWS_DEMO_ACCOUNT_ID }}"
          echo "Target AWS Account: $TARGET_AWS_ACCOUNT"
      
          SNAPSHOT_ID=$(aws ec2 describe-images --image-ids $AMI_ID --query "Images[0].BlockDeviceMappings[0].Ebs.SnapshotId" --output text)
          echo "Associated Snapshot ID: $SNAPSHOT_ID"
      
          # Share AMI with DEMO account
          aws ec2 modify-image-attribute --image-id $AMI_ID --launch-permission "Add=[{UserId=$TARGET_AWS_ACCOUNT}]"
      
          # Share associated snapshot with DEMO account
          aws ec2 modify-snapshot-attribute --snapshot-id $SNAPSHOT_ID --attribute createVolumePermission --operation-type add --user-ids $TARGET_AWS_ACCOUNT
      
          # Verify AMI sharing
          aws ec2 describe-image-attribute --image-id $AMI_ID --attribute launchPermission
      
          # Verify snapshot sharing
          aws ec2 describe-snapshot-attribute --snapshot-id $SNAPSHOT_ID --attribute createVolumePermission

      - name: AWS CLI to use demo account
        run: |
          aws configure set aws_access_key_id "${{ secrets.AWS_DEMO_ACCESS_KEY_ID }}"
          aws configure set aws_secret_access_key "${{ secrets.AWS_DEMO_SECRET_ACCESS_KEY }}"
          aws configure set region us-east-1

      - name: Create new version of Launch Template and set as default
        run: |
          AMI_ID=$(aws ec2 describe-images --owners self --query "Images | sort_by(@, &CreationDate)[-1].ImageId" --output text)
          LAUNCH_TEMPLATE_NAME="csye6225-launch-template"  # Replace with your actual LT name
      
          echo "Using AMI ID: $AMI_ID"
      
          NEW_VERSION=$(aws ec2 create-launch-template-version \
            --launch-template-name $LAUNCH_TEMPLATE_NAME \
            --version-description "CI Update with AMI $AMI_ID" \
            --source-version 1 \
            --launch-template-data "{\"ImageId\":\"$AMI_ID\"}" \
            --query 'LaunchTemplateVersion.VersionNumber' \
            --output text)
      
          echo "New Launch Template Version: $NEW_VERSION"
      
          aws ec2 modify-launch-template \
            --launch-template-name $LAUNCH_TEMPLATE_NAME \
            --default-version $NEW_VERSION

      - name: Trigger Auto Scaling Group Instance Refresh
        run: |
          aws autoscaling start-instance-refresh \
            --auto-scaling-group-name csye6225-asg \
            --preferences '{"MinHealthyPercentage": 100, "InstanceWarmup": 300}'

      - name: Wait for Instance Refresh Completion
        run: |
          echo "Waiting for instance refresh to complete..."
          
          while true; do
            STATUS=$(aws autoscaling describe-instance-refreshes --auto-scaling-group-name csye6225-asg --query "InstanceRefreshes[0].Status" --output text)
            echo "Current refresh status: $STATUS"
            if [[ "$STATUS" == "Successful" ]]; then
              echo "Instance refresh completed successfully!"
              break
            elif [[ "$STATUS" == "Failed" ]]; then
              echo "Instance refresh failed!"
              exit 1
            fi
            sleep 30
          done